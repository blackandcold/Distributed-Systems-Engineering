// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package at.ac.tuwien.dse.fairsurgeries.web;

import at.ac.tuwien.dse.fairsurgeries.domain.Notification;
import at.ac.tuwien.dse.fairsurgeries.domain.NotificationReason;
import at.ac.tuwien.dse.fairsurgeries.service.NotificationService;
import at.ac.tuwien.dse.fairsurgeries.service.OPSlotService;
import at.ac.tuwien.dse.fairsurgeries.web.NotificationController;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.util.Arrays;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect NotificationController_Roo_Controller {
    
    @Autowired
    NotificationService NotificationController.notificationService;
    
    @Autowired
    OPSlotService NotificationController.oPSlotService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String NotificationController.create(@Valid Notification notification, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, notification);
            return "notifications/create";
        }
        uiModel.asMap().clear();
        notificationService.saveNotification(notification);
        return "redirect:/notifications/" + encodeUrlPathSegment(notification.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String NotificationController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Notification());
        return "notifications/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String NotificationController.show(@PathVariable("id") BigInteger id, Model uiModel) {
        uiModel.addAttribute("notification", notificationService.findNotification(id));
        uiModel.addAttribute("itemId", id);
        return "notifications/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String NotificationController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("notifications", notificationService.findNotificationEntries(firstResult, sizeNo));
            float nrOfPages = (float) notificationService.countAllNotifications() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("notifications", notificationService.findAllNotifications());
        }
        return "notifications/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String NotificationController.update(@Valid Notification notification, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, notification);
            return "notifications/update";
        }
        uiModel.asMap().clear();
        notificationService.updateNotification(notification);
        return "redirect:/notifications/" + encodeUrlPathSegment(notification.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String NotificationController.updateForm(@PathVariable("id") BigInteger id, Model uiModel) {
        populateEditForm(uiModel, notificationService.findNotification(id));
        return "notifications/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String NotificationController.delete(@PathVariable("id") BigInteger id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Notification notification = notificationService.findNotification(id);
        notificationService.deleteNotification(notification);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/notifications";
    }
    
    void NotificationController.populateEditForm(Model uiModel, Notification notification) {
        uiModel.addAttribute("notification", notification);
        uiModel.addAttribute("notificationreasons", Arrays.asList(NotificationReason.values()));
        uiModel.addAttribute("opslots", oPSlotService.findAllOPSlots());
    }
    
    String NotificationController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
