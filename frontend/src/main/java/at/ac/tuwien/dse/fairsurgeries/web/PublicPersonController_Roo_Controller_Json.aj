// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package at.ac.tuwien.dse.fairsurgeries.web;

import at.ac.tuwien.dse.fairsurgeries.domain.PublicPerson;
import at.ac.tuwien.dse.fairsurgeries.web.PublicPersonController;
import java.math.BigInteger;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect PublicPersonController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PublicPersonController.showJson(@PathVariable("id") BigInteger id) {
        PublicPerson publicPerson = publicPersonService.findPublicPerson(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (publicPerson == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(publicPerson.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PublicPersonController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<PublicPerson> result = publicPersonService.findAllPublicpeople();
        return new ResponseEntity<String>(PublicPerson.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> PublicPersonController.createFromJson(@RequestBody String json) {
        PublicPerson publicPerson = PublicPerson.fromJsonToPublicPerson(json);
        publicPersonService.savePublicPerson(publicPerson);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> PublicPersonController.createFromJsonArray(@RequestBody String json) {
        for (PublicPerson publicPerson: PublicPerson.fromJsonArrayToPublicpeople(json)) {
            publicPersonService.savePublicPerson(publicPerson);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> PublicPersonController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        PublicPerson publicPerson = PublicPerson.fromJsonToPublicPerson(json);
        if (publicPersonService.updatePublicPerson(publicPerson) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> PublicPersonController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (PublicPerson publicPerson: PublicPerson.fromJsonArrayToPublicpeople(json)) {
            if (publicPersonService.updatePublicPerson(publicPerson) == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> PublicPersonController.deleteFromJson(@PathVariable("id") BigInteger id) {
        PublicPerson publicPerson = publicPersonService.findPublicPerson(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (publicPerson == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        publicPersonService.deletePublicPerson(publicPerson);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
