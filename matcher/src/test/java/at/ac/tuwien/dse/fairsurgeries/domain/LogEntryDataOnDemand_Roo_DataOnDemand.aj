// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package at.ac.tuwien.dse.fairsurgeries.domain;

import at.ac.tuwien.dse.fairsurgeries.domain.LogEntry;
import at.ac.tuwien.dse.fairsurgeries.domain.LogEntryDataOnDemand;
import at.ac.tuwien.dse.fairsurgeries.service.LogEntryService;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect LogEntryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LogEntryDataOnDemand: @Component;
    
    private Random LogEntryDataOnDemand.rnd = new SecureRandom();
    
    private List<LogEntry> LogEntryDataOnDemand.data;
    
    @Autowired
    LogEntryService LogEntryDataOnDemand.logEntryService;
    
    public LogEntry LogEntryDataOnDemand.getNewTransientLogEntry(int index) {
        LogEntry obj = new LogEntry();
        setComponent(obj, index);
        setExecutionTimestamp(obj, index);
        setMessage(obj, index);
        return obj;
    }
    
    public void LogEntryDataOnDemand.setComponent(LogEntry obj, int index) {
        String component = "component_" + index;
        obj.setComponent(component);
    }
    
    public void LogEntryDataOnDemand.setExecutionTimestamp(LogEntry obj, int index) {
        Date executionTimestamp = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setExecutionTimestamp(executionTimestamp);
    }
    
    public void LogEntryDataOnDemand.setMessage(LogEntry obj, int index) {
        String message = "message_" + index;
        obj.setMessage(message);
    }
    
    public LogEntry LogEntryDataOnDemand.getSpecificLogEntry(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        LogEntry obj = data.get(index);
        BigInteger id = obj.getId();
        return logEntryService.findLogEntry(id);
    }
    
    public LogEntry LogEntryDataOnDemand.getRandomLogEntry() {
        init();
        LogEntry obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return logEntryService.findLogEntry(id);
    }
    
    public boolean LogEntryDataOnDemand.modifyLogEntry(LogEntry obj) {
        return false;
    }
    
    public void LogEntryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = logEntryService.findLogEntryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'LogEntry' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<LogEntry>();
        for (int i = 0; i < 10; i++) {
            LogEntry obj = getNewTransientLogEntry(i);
            try {
                logEntryService.saveLogEntry(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
