// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package at.ac.tuwien.dse.fairsurgeries.domain;

import at.ac.tuwien.dse.fairsurgeries.domain.OPSlotDataOnDemand;
import at.ac.tuwien.dse.fairsurgeries.domain.OPSlotIntegrationTest;
import at.ac.tuwien.dse.fairsurgeries.service.OPSlotService;
import java.math.BigInteger;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect OPSlotIntegrationTest_Roo_IntegrationTest {
    
    declare @type: OPSlotIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: OPSlotIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    private OPSlotDataOnDemand OPSlotIntegrationTest.dod;
    
    @Autowired
    OPSlotService OPSlotIntegrationTest.oPSlotService;
    
    @Test
    public void OPSlotIntegrationTest.testCountAllOPSlots() {
        Assert.assertNotNull("Data on demand for 'OPSlot' failed to initialize correctly", dod.getRandomOPSlot());
        long count = oPSlotService.countAllOPSlots();
        Assert.assertTrue("Counter for 'OPSlot' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void OPSlotIntegrationTest.testFindOPSlot() {
        OPSlot obj = dod.getRandomOPSlot();
        Assert.assertNotNull("Data on demand for 'OPSlot' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'OPSlot' failed to provide an identifier", id);
        obj = oPSlotService.findOPSlot(id);
        Assert.assertNotNull("Find method for 'OPSlot' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'OPSlot' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void OPSlotIntegrationTest.testFindAllOPSlots() {
        Assert.assertNotNull("Data on demand for 'OPSlot' failed to initialize correctly", dod.getRandomOPSlot());
        long count = oPSlotService.countAllOPSlots();
        Assert.assertTrue("Too expensive to perform a find all test for 'OPSlot', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<OPSlot> result = oPSlotService.findAllOPSlots();
        Assert.assertNotNull("Find all method for 'OPSlot' illegally returned null", result);
        Assert.assertTrue("Find all method for 'OPSlot' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void OPSlotIntegrationTest.testFindOPSlotEntries() {
        Assert.assertNotNull("Data on demand for 'OPSlot' failed to initialize correctly", dod.getRandomOPSlot());
        long count = oPSlotService.countAllOPSlots();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<OPSlot> result = oPSlotService.findOPSlotEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'OPSlot' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'OPSlot' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void OPSlotIntegrationTest.testSaveOPSlot() {
        Assert.assertNotNull("Data on demand for 'OPSlot' failed to initialize correctly", dod.getRandomOPSlot());
        OPSlot obj = dod.getNewTransientOPSlot(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'OPSlot' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'OPSlot' identifier to be null", obj.getId());
        oPSlotService.saveOPSlot(obj);
        Assert.assertNotNull("Expected 'OPSlot' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void OPSlotIntegrationTest.testDeleteOPSlot() {
        OPSlot obj = dod.getRandomOPSlot();
        Assert.assertNotNull("Data on demand for 'OPSlot' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'OPSlot' failed to provide an identifier", id);
        obj = oPSlotService.findOPSlot(id);
        oPSlotService.deleteOPSlot(obj);
        Assert.assertNull("Failed to remove 'OPSlot' with identifier '" + id + "'", oPSlotService.findOPSlot(id));
    }
    
}
