// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package at.ac.tuwien.dse.fairsurgeries.domain;

import at.ac.tuwien.dse.fairsurgeries.domain.Doctor;
import at.ac.tuwien.dse.fairsurgeries.domain.DoctorDataOnDemand;
import at.ac.tuwien.dse.fairsurgeries.domain.Hospital;
import at.ac.tuwien.dse.fairsurgeries.domain.HospitalDataOnDemand;
import at.ac.tuwien.dse.fairsurgeries.domain.OPSlot;
import at.ac.tuwien.dse.fairsurgeries.domain.OPSlotDataOnDemand;
import at.ac.tuwien.dse.fairsurgeries.domain.Patient;
import at.ac.tuwien.dse.fairsurgeries.domain.PatientDataOnDemand;
import at.ac.tuwien.dse.fairsurgeries.domain.SurgeryType;
import at.ac.tuwien.dse.fairsurgeries.service.OPSlotService;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect OPSlotDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OPSlotDataOnDemand: @Component;
    
    private Random OPSlotDataOnDemand.rnd = new SecureRandom();
    
    private List<OPSlot> OPSlotDataOnDemand.data;
    
    @Autowired
    private DoctorDataOnDemand OPSlotDataOnDemand.doctorDataOnDemand;
    
    @Autowired
    private HospitalDataOnDemand OPSlotDataOnDemand.hospitalDataOnDemand;
    
    @Autowired
    private PatientDataOnDemand OPSlotDataOnDemand.patientDataOnDemand;
    
    @Autowired
    OPSlotService OPSlotDataOnDemand.oPSlotService;
    
    public OPSlot OPSlotDataOnDemand.getNewTransientOPSlot(int index) {
        OPSlot obj = new OPSlot();
        setDateFrom(obj, index);
        setDateTo(obj, index);
        setDoctor(obj, index);
        setHospital(obj, index);
        setPatient(obj, index);
        setSurgeryType(obj, index);
        return obj;
    }
    
    public void OPSlotDataOnDemand.setDateFrom(OPSlot obj, int index) {
        Date dateFrom = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateFrom(dateFrom);
    }
    
    public void OPSlotDataOnDemand.setDateTo(OPSlot obj, int index) {
        Date dateTo = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateTo(dateTo);
    }
    
    public void OPSlotDataOnDemand.setDoctor(OPSlot obj, int index) {
        Doctor doctor = doctorDataOnDemand.getRandomDoctor();
        obj.setDoctor(doctor);
    }
    
    public void OPSlotDataOnDemand.setHospital(OPSlot obj, int index) {
        Hospital hospital = hospitalDataOnDemand.getRandomHospital();
        obj.setHospital(hospital);
    }
    
    public void OPSlotDataOnDemand.setPatient(OPSlot obj, int index) {
        Patient patient = patientDataOnDemand.getRandomPatient();
        obj.setPatient(patient);
    }
    
    public void OPSlotDataOnDemand.setSurgeryType(OPSlot obj, int index) {
        SurgeryType surgeryType = SurgeryType.class.getEnumConstants()[0];
        obj.setSurgeryType(surgeryType);
    }
    
    public OPSlot OPSlotDataOnDemand.getSpecificOPSlot(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        OPSlot obj = data.get(index);
        BigInteger id = obj.getId();
        return oPSlotService.findOPSlot(id);
    }
    
    public OPSlot OPSlotDataOnDemand.getRandomOPSlot() {
        init();
        OPSlot obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return oPSlotService.findOPSlot(id);
    }
    
    public boolean OPSlotDataOnDemand.modifyOPSlot(OPSlot obj) {
        return false;
    }
    
    public void OPSlotDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = oPSlotService.findOPSlotEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'OPSlot' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<OPSlot>();
        for (int i = 0; i < 10; i++) {
            OPSlot obj = getNewTransientOPSlot(i);
            try {
                oPSlotService.saveOPSlot(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
